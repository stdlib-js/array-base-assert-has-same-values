{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplex128Array = require( '@stdlib/array-base-assert-is-complex128array' );\nvar isComplex64Array = require( '@stdlib/array-base-assert-is-complex64array' );\nvar isBooleanArray = require( '@stdlib/array-base-assert-is-booleanarray' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar isSameValue = require( '@stdlib/assert-is-same-value' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests if two arrays have the same values.\n*\n* @private\n* @param {Collection} x - first input array\n* @param {Collection} y - second input array\n* @returns {boolean} boolean indicating if both arrays have the same values\n*\n* @example\n* var x = [ 0, 0, 1, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = internal( x, y );\n* // returns true\n*\n* @example\n* var x = [ 0, 0, 0, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = internal( x, y );\n* // returns false\n*/\nfunction internal( x, y ) {\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !isSameValue( x[ i ], y[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n* Tests if two arrays have the same values.\n*\n* @private\n* @param {Object} x - first input array object\n* @param {Object} y - second input array object\n* @returns {boolean} boolean indicating if both arrays have the same values\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n* var y = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n*\n* var out = accessors( x, y );\n* // returns true\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = arraylike2object( toAccessorArray( [ 0, 0, 0, 0 ] ) );\n* var y = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n*\n* var out = accessors( x, y );\n* // returns false\n*/\nfunction accessors( x, y ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yget;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !isSameValue( xget( xdata, i ), yget( ydata, i ) ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if two arrays have the same values.\n*\n* @param {Collection} x - first input array\n* @param {Collection} y - second input array\n* @returns {boolean} boolean indicating if both arrays have the same values\n*\n* @example\n* var x = [ 0, 0, 1, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = hasSameValues( x, y );\n* // returns true\n*\n* @example\n* var x = [ 0, 0, 0, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = hasSameValues( x, y );\n* // returns false\n*/\nfunction hasSameValues( x, y ) {\n\tvar FLG;\n\tvar xo;\n\tvar yo;\n\tvar xr;\n\tvar yr;\n\n\tif ( x.length !== y.length ) {\n\t\treturn false;\n\t}\n\txo = arraylike2object( x );\n\tyo = arraylike2object( y );\n\tif ( xo.accessorProtocol || yo.accessorProtocol ) {\n\t\tFLG = 2;\n\n\t\t// If provided boolean arrays, reinterpret the arrays to avoid using accessors to access array elements...\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\tif ( isBooleanArray( y ) ) {\n\t\t\t\treturn internal( reinterpretBoolean( x, 0 ), reinterpretBoolean( y, 0 ) );\n\t\t\t}\n\t\t\treturn accessors( xo, yo );\n\t\t}\n\t\t// If provided a complex number array, reinterpret as a real typed array and test interleaved real and imaginary components...\n\t\tif ( isComplex128Array( x ) ) {\n\t\t\txr = reinterpret128( x, 0 );\n\t\t\tFLG -= 1;\n\t\t} else if ( isComplex64Array( x ) ) {\n\t\t\txr = reinterpret64( x, 0 );\n\t\t\tFLG -= 1;\n\t\t}\n\t\tif ( isComplex128Array( y ) ) {\n\t\t\tyr = reinterpret128( y, 0 );\n\t\t\tFLG -= 1;\n\t\t} else if ( isComplex64Array( y ) ) {\n\t\t\tyr = reinterpret64( y, 0 );\n\t\t\tFLG -= 1;\n\t\t}\n\t\tif ( FLG === 0 ) {\n\t\t\treturn internal( xr, yr );\n\t\t}\n\t\treturn accessors( xo, yo );\n\t}\n\treturn internal( x, y );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasSameValues;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two arrays have the same values.\n*\n* @module @stdlib/array-base-assert-has-same-values\n*\n* @example\n* var hasSameValues = require( '@stdlib/array-base-assert-has-same-values' );\n*\n* var x = [ 0, 0, 1, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = hasSameValues( x, y );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,8CAA+C,EAC5EC,EAAmB,QAAS,6CAA8C,EAC1EC,EAAiB,QAAS,2CAA4C,EACtEC,EAAmB,QAAS,qCAAsC,EAClEC,EAAiB,QAAS,6CAA8C,EACxEC,EAAgB,QAAS,4CAA6C,EACtEC,EAAqB,QAAS,0CAA2C,EACzEC,EAAc,QAAS,8BAA+B,EA2B1D,SAASC,EAAUC,EAAGC,EAAI,CACzB,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAIF,EAAE,OAAQE,IAC1B,GAAK,CAACJ,EAAaE,EAAGE,CAAE,EAAGD,EAAGC,CAAE,CAAE,EACjC,MAAO,GAGT,MAAO,EACR,CA8BA,SAASC,EAAWH,EAAGC,EAAI,CAC1B,IAAIG,EACAC,EACAC,EACAC,EACAL,EAQJ,IANAE,EAAQJ,EAAE,KACVK,EAAQJ,EAAE,KAEVK,EAAON,EAAE,UAAW,CAAE,EACtBO,EAAON,EAAE,UAAW,CAAE,EAEhBC,EAAI,EAAGA,EAAIE,EAAM,OAAQF,IAC9B,GAAK,CAACJ,EAAaQ,EAAMF,EAAOF,CAAE,EAAGK,EAAMF,EAAOH,CAAE,CAAE,EACrD,MAAO,GAGT,MAAO,EACR,CA0BA,SAASM,EAAeR,EAAGC,EAAI,CAC9B,IAAIQ,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAKb,EAAE,SAAWC,EAAE,OACZ,IAERS,EAAKhB,EAAkBM,CAAE,EACzBW,EAAKjB,EAAkBO,CAAE,EACpBS,EAAG,kBAAoBC,EAAG,kBAC9BF,EAAM,EAGDhB,EAAgBO,CAAE,EACjBP,EAAgBQ,CAAE,EACfF,EAAUF,EAAoBG,EAAG,CAAE,EAAGH,EAAoBI,EAAG,CAAE,CAAE,EAElEE,EAAWO,EAAIC,CAAG,GAGrBpB,EAAmBS,CAAE,GACzBY,EAAKjB,EAAgBK,EAAG,CAAE,EAC1BS,GAAO,GACIjB,EAAkBQ,CAAE,IAC/BY,EAAKhB,EAAeI,EAAG,CAAE,EACzBS,GAAO,GAEHlB,EAAmBU,CAAE,GACzBY,EAAKlB,EAAgBM,EAAG,CAAE,EAC1BQ,GAAO,GACIjB,EAAkBS,CAAE,IAC/BY,EAAKjB,EAAeK,EAAG,CAAE,EACzBQ,GAAO,GAEHA,IAAQ,EACLV,EAAUa,EAAIC,CAAG,EAElBV,EAAWO,EAAIC,CAAG,IAEnBZ,EAAUC,EAAGC,CAAE,EACvB,CAKAX,EAAO,QAAUkB,ICtJjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplex128Array", "isComplex64Array", "isBooleanArray", "arraylike2object", "reinterpret128", "reinterpret64", "reinterpretBoolean", "isSameValue", "internal", "x", "y", "i", "accessors", "xdata", "ydata", "xget", "yget", "hasSameValues", "FLG", "xo", "yo", "xr", "yr", "main"]
}
